"use strict";(self.webpackChunkbleep_site=self.webpackChunkbleep_site||[]).push([[3206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s="Getting started",i={unversionedId:"intro",id:"intro",title:"Getting started",description:"To install bleep, first follow instructions to install coursier CLI.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,tags:[],version:"current",frontMatter:{}},c={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting started"),(0,o.kt)("p",null,"To install bleep, first follow instructions to install ",(0,o.kt)("a",{parentName:"p",href:"https://get-coursier.io/docs/cli-installation"},"coursier CLI"),".\nThen install bleep"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ cs install bleep\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:"mdoc",mdoc:!0},'import bleep._\n\nimport mdoc.{DocusaurusPlugin, MdocPlugin}\n\nimport java.nio.file.Path\nimport scala.concurrent.ExecutionContext\n\nobject GenDocumentation {\n  def main(args: Array[String]): Unit =\n    bootstrap.forScript("GenDocs") { (started, commands) =>\n      val projectName = model.CrossProjectName(model.ProjectName("scripts"), crossId = None)\n\n      commands.compile(List(projectName))\n\n      val mdoc = new MdocPlugin(started, projectName) {\n        override def mdocIn: Path = started.buildPaths.buildDir / "bleep-site-in"\n        override def mdocOut: Path = started.buildPaths.buildDir / "bleep-site" / "docs"\n        override def mdocVariables = Map("VERSION" -> "1")\n      }\n\n      val docusaurus = new DocusaurusPlugin(\n        started.buildPaths.buildDir / "bleep-site",\n        mdoc,\n        "bleep-site",\n        Path.of("yarn"),\n        started.logger,\n        isDocusaurus2 = true\n      )\n      \n      args.headOption match {\n        case Some("dev") =>\n          docusaurus.dev(ExecutionContext.global)\n        case Some("deploy") =>\n          docusaurus.docusaurusPublishGhpages(mdocArgs = Nil)\n        case Some(other) =>\n          sys.error(s"Expected argument to be dev or deploy, not $other")\n        case None =>\n          val path = docusaurus.doc(mdocArgs = args.toList)\n          started.logger.info(s"Created documentation at $path")\n      }\n    }\n}\n')))}p.isMDXComponent=!0}}]);