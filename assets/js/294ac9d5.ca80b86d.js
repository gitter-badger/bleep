"use strict";(self.webpackChunkbleep_site=self.webpackChunkbleep_site||[]).push([[856],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},o="But my build does much more!",l={unversionedId:"plugins",id:"plugins",title:"But my build does much more!",description:"Yes, your build does other things.",source:"@site/docs/plugins.md",sourceDirName:".",slug:"/plugins",permalink:"/docs/plugins",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"About Bleep",permalink:"/docs/"},next:{title:"Getting started",permalink:"/docs/intro"}},s={},p=[{value:"Scripts",id:"scripts",level:3},{value:"Running",id:"running",level:3},{value:"An example",id:"an-example",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"but-my-build-does-much-more"},"But my build does much more!"),(0,a.kt)("p",null,"Yes, your build does other things."),(0,a.kt)("p",null,"It generates code, it distributes artifacts, it builds websites. Probably a lot more"),(0,a.kt)("p",null,"But none of this has to be in the build itself!"),(0,a.kt)("h3",{id:"scripts"},"Scripts"),(0,a.kt)("p",null,"Bleep introduces ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts"),".\nDefined in your build file as the ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")," in a ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),", it allows you to run any class with a ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "native-image": "mymodule/mypackage.GenNativeImage"\n  }\n}\n')),(0,a.kt)("h3",{id:"running"},"Running"),(0,a.kt)("p",null,"You can run the script like this, it can be tab-completed to save some keystrokes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ bleep native-image\n")),(0,a.kt)("h3",{id:"an-example"},"An example"),(0,a.kt)("p",null,"Bleep provides you with the entire build in a structured format, so you can query projects,\npaths and so on."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import bleep.model\nimport bleep.tasks._\n\nobject GenNativeImage {\n  def main(args: Array[String]): Unit =\n    bleep.bootstrap.forScript("GenNativeImage") { (started, commands) =>\n      \n      // the project we want to build native image of\n      val projectName = model.CrossProjectName(model.ProjectName("bleep-cli"), crossId = None)\n      // lookup the bloop project\n      val project = started.bloopProjects(projectName)\n      // ensure we have built it\n      commands.compile(List(projectName))\n      \n      // setup native-image plugin\n      val plugin = new NativeImagePlugin(\n        project = project,\n        logger = started.logger,\n        nativeImageOptions = List("--no-fallback", "-H:+ReportExceptionStackTraces"),\n        nativeImageJvm = started.rawBuild.jvm.getOrElse(model.Jvm.graalvm)\n      ) \n      // run\n      val path = plugin.nativeImage()\n      started.logger.info(s"Created native-image at $path")\n    }\n}\n\n')),(0,a.kt)("p",null,"It might already be clear to you, but anyways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you can start this program from bleep (",(0,a.kt)("inlineCode",{parentName:"li"},"bleep native-image"),"), from your IDE, from anywhere"),(0,a.kt)("li",{parentName:"ul"},"you can debug it like a normal program"),(0,a.kt)("li",{parentName:"ul"},"you can include any dependencies you want, from any scala version. No class loader issues."),(0,a.kt)("li",{parentName:"ul"},"you have all the structured info from the build, without having to express code in your build"),(0,a.kt)("li",{parentName:"ul"},"the NativeImagePlugin is directly ported from sbt. In fact most interesting sbt plugins can be ported quite easily! setting = ",(0,a.kt)("inlineCode",{parentName:"li"},"val"),", task = ",(0,a.kt)("inlineCode",{parentName:"li"},"def"),".")))}c.isMDXComponent=!0}}]);