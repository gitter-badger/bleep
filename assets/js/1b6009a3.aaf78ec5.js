"use strict";(self.webpackChunkbleep_site=self.webpackChunkbleep_site||[]).push([[4634],{915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),s=(n(7294),n(3905));var o=n(814);const i={},r="But my build does much more!",l={unversionedId:"my-build-does-more",id:"my-build-does-more",title:"But my build does much more!",description:"Yes, your build does other things.",source:"@site/docs/my-build-does-more.mdx",sourceDirName:".",slug:"/my-build-does-more",permalink:"/docs/my-build-does-more",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"About Bleep",permalink:"/docs/"},next:{title:"Install Bleep",permalink:"/docs/installing"}},u={},d=[{value:"Scripts",id:"scripts",level:3},{value:"Running",id:"running",level:3},{value:"An example",id:"an-example",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"but-my-build-does-much-more"},"But my build does much more!"),(0,s.kt)("p",null,"Yes, your build does other things."),(0,s.kt)("p",null,"It generates code, it distributes artifacts, it builds websites. Probably a lot more"),(0,s.kt)("p",null,"But none of this has to be in the build itself!"),(0,s.kt)("h3",{id:"scripts"},"Scripts"),(0,s.kt)("p",null,"Bleep introduces ",(0,s.kt)("inlineCode",{parentName:"p"},"scripts"),".\nDefined in your build file as the ",(0,s.kt)("inlineCode",{parentName:"p"},"scripts")," in a ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json"),", it allows you to run any class with a ",(0,s.kt)("inlineCode",{parentName:"p"},"main")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"projects:\n  myscripts:\n    dependencies: build.bleep::bleep-tasks-publishing:${BLEEP_VERSION}\n    scala:\n      version: 3.2.0\nscripts:\n  generate-docs: myscripts/bleep.scripts.GenDocumentation\n")),(0,s.kt)("h3",{id:"running"},"Running"),(0,s.kt)("p",null,"You can run the script like this, it can be tab-completed to save some keystrokes"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"$ bleep generate-docs\n")),(0,s.kt)("h3",{id:"an-example"},"An example"),(0,s.kt)("p",null,"Bleep provides you with the entire build in a structured format, so you can query projects,\npaths and so on."),(0,s.kt)(o.Z,{language:"scala",mdxType:"CodeBlock"},'package bleep\npackage scripts\n\nimport mdoc.{DocusaurusPlugin, MdocPlugin}\n\nimport java.nio.file.Path\n\nobject GenDocumentation extends BleepScript("GenDocumentation") {\n  override def run(started: Started, commands: Commands, args: List[String]): Unit = {\n    val scriptsProject = model.CrossProjectName(model.ProjectName("scripts"), crossId = None)\n\n    commands.compile(List(scriptsProject))\n\n    val mdoc = new MdocPlugin(started, scriptsProject) {\n      override def mdocIn: Path = started.buildPaths.buildDir / "bleep-site-in"\n      override def mdocOut: Path = started.buildPaths.buildDir / "bleep-site" / "docs"\n    }\n\n    val docusaurus = new DocusaurusPlugin(\n      website = started.buildPaths.buildDir / "bleep-site",\n      mdoc = mdoc,\n      docusaurusProjectName = "bleep-site",\n      yarn = Path.of("yarn"),\n      logger = started.logger,\n      isDocusaurus2 = true\n    )\n\n    args.headOption match {\n      case Some("dev") =>\n        docusaurus.dev(started.executionContext)\n      case Some("deploy") =>\n        docusaurus.docusaurusPublishGhpages(mdocArgs = Nil)\n      case Some(other) =>\n        sys.error(s"Expected argument to be dev or deploy, not $other")\n      case None =>\n        val path = docusaurus.doc(mdocArgs = args)\n        started.logger.info(s"Created documentation at $path")\n    }\n  }\n}\n'),(0,s.kt)("p",null,"It might already be clear to you, but anyway:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"you can start this program from bleep (",(0,s.kt)("inlineCode",{parentName:"li"},"bleep generate-docs"),"), from your IDE, from anywhere"),(0,s.kt)("li",{parentName:"ul"},"you can debug it like a normal program"),(0,s.kt)("li",{parentName:"ul"},"you have all the structured info from the build, without having to express code in your build"),(0,s.kt)("li",{parentName:"ul"},"you can include any dependencies you want, from any scala version. No class loader issues."),(0,s.kt)("li",{parentName:"ul"},"you can even write your scripts for any platform"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"MdocPlugin")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"DocusaurusPlugin")," are directly ported from sbt. In fact most interesting sbt plugins can be ported quite easily! setting = ",(0,s.kt)("inlineCode",{parentName:"li"},"val"),", task = ",(0,s.kt)("inlineCode",{parentName:"li"},"def"),".")))}p.isMDXComponent=!0}}]);